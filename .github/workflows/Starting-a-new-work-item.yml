name: Starting a new work item

on:
    project_card:
        types: [moved]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Check move from "TO DO" to "IN PROGRESS"
              id: check
              uses: chandrakiran-dev/sfdx-actions/project_card-check-movement@master
              with:
                  token: ${{ secrets.GITHUB_TOKEN}}
                  fromColumnId: ${{ github.event.changes.column_id.from }}
                  fromColumnName: TO DO
                  toColumnId: ${{ github.event.project_card.column_id }}
                  toColumnName: IN PROGRESS
            - name: Check out the source code
              uses: actions/checkout@v1
              if: steps.check.outputs.isMatch == 'true'
            - name: Populate auth file with SFDX_URL secret
              if: steps.check.outputs.isMatch == 'true'
              shell: bash
              run: echo ${{ secrets.DEV_HUB_SFDXURL}} > ./SFDX_URL_STORE.txt
            - name: Authenticate against dev hub
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:auth:sfdxurl:store --sfdxurlfile=./SFDX_URL_STORE.txt --setalias=devhub --setdefaultdevhubusername
            - name: Create scratch org
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:org:create --definitionfile=config/project-scratch-def.json --setalias=scratch-org --setdefaultusername
            - name: Push source
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:source:push
            - name: Create user
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:user:create --definitionfile=config/user-def.json --setalias=new-user
            - name: Change password
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:user:password:generate --targetusername=new-user
            - name: Display user information
              id: display_user
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:user:display --targetusername=new-user --json
            - name: Display open url
              id: display_url
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:org:open --urlonly --targetusername=new-user --json
            - name: Get Github User Info
              id: github_user_info
              if: steps.check.outputs.isMatch == 'true'
              uses: chandrakiran-dev/sfdx-actions/get-user-info@master
              with:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
                USERNAME: ${{ github.actor }}
            - name: Display org information
              id: display_org
              uses: forcedotcom/salesforcedx-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                  args: force:org:display --targetusername=new-user --verbose --json
            - name: Stash credentials for later
              id: get_sfdx_url
              if: steps.check.outputs.isMatch == 'true'
              shell: bash
              run: |
                  result=${{ toJSON(steps.display_org.outputs.result) }}
                  sfdxurl=$(echo $result | jq -r .result.sfdxAuthUrl)
                  echo "::set-output name=sfdx_url::$sfdxurl"
            - name: SendGrid
              uses: vazexqi/sendgrid-action@v1.0.0
              if: steps.check.outputs.isMatch == 'true'
              env:
                  DISPLAY_USER_JSON: ${{ steps.display_user.outputs.result }}
                  DISPLAY_URL_JSON: ${{ steps.display_url.outputs.result }}
                  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
                  TO_EMAIL: ${{steps.github_user_info.outputs.OUTPUT_USER}}
                  SFDX_URL: ${{steps.get_sfdx_url.outputs.sfdx_url}
                  SCRIPT_FILEPATH: scripts/email.js
            - name: Get Github User Info
              id: firebase_token
              uses: chandrakiran-dev/sfdx-actions/firebase-actions@master
              if: steps.check.outputs.isMatch == 'true'
              with:
                FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL}}
                FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
            - name: Stash credentials for later
              id: stash_credentials
              if: steps.check.outputs.isMatch == 'true'
              shell: bash
              run: |
                  value=$(node scripts/extract-issue-number.js ${{ github.event.project_card.content_url }})
                  echo "::set-output name=ticket_number::$value"
                  result=${{ toJSON(steps.display_org.outputs.result) }}
                  sfdxurl=$(echo $result | jq -r .result.sfdxAuthUrl)
                  curl -X PUT -d '"'"${sfdxurl}"'"' https://salesforce-orgs-default-rtdb.firebaseio.com/${{ secrets.PROJECT_NAME }}-$value.json?access_token=${{ steps.firebase_token.outputs.ACCESS_TOKEN }}
            - name: Get branch name
              if: steps.check.outputs.isMatch == 'true'
              id: get_branch_name
              uses: chandrakiran-dev/sfdx-actions/get-branch-name@master
              with:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
                ISSUE_NUMBER: ${{ steps.stash_credentials.outputs.ticket_number }}
                PROJECT_PREFIX: ${{ secrets.PROJECT_NAME }}
            - name: Create feature branch
              if: steps.check.outputs.isMatch == 'true'
              uses: peterjgrainger/action-create-branch@v2.0.1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                branch: '${{steps.get_branch_name.outputs.BRANCH_NAME}}'      
